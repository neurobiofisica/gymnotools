#!/usr/bin/env python
# -*- coding: utf-8 -*-
from __future__ import division

import sys,os
sys.path.append( os.path.abspath('..') )
from read_param import *
# import NChan, freq, winSize

import scipy.signal
import numpy as np
import sys
import matplotlib.pyplot as plt
import argparse

from windowfile import writewin

def gmean(arr, kernel_size=3):
    tam = arr.size
    out = np.memmap('/tmp/tmp.f32', dtype=np.float32, shape=(tam+kernel_size,), mode='w+')
    out[:] = [ np.prod(arr[max(0,n):min(n+kernel_size,tam)])**(1./kernel_size) for n in range(-kernel_size//2,tam+kernel_size//2) ]
    return out[kernel_size//2:tam+kernel_size//2]

#medfiltsize= 0.0010
gmeansize = 31

hmin = 0.060

if sys.version_info.major == 3:
    xrange = range
    mode = 'b'
else:
    mode = ''

tol = int(0.0005*freq)
nchan = NChan
chirpStep = int(0.300*freq)

class MyParser(argparse.ArgumentParser):
    def error(self, message):
        self.print_help()
        sys.stderr.write('\nerror: %s\n'%message)
        sys.exit(2)

description = 'Detect spikes on memmapf32 (DasyLab I32) format series'
parser = MyParser(description=description, formatter_class=argparse.RawTextHelpFormatter)

parser.add_argument('timeseries_file', type=argparse.FileType('r'), help='Timeseries (I32) file')
parser.add_argument('hilbert_file', help='Output Absolute sum of Hilbert Transform of the signal on I32 format')
parser.add_argument('outfile', type=argparse.FileType('wb'), help='Output spike window file')
parser.add_argument('--chirps_file', type=argparse.FileType('r'), help='Chirp regions file')
parser.add_argument('--chirps_gain', type=float, default=0.3, help='Thresold ratio on chirp regions')
parser.add_argument('-d', '--detection', type=float, default=1.00, help='Theshold for detecting a spike')
parser.add_argument('-r', '--refractory', type=float, default=0.001, help='Refractory period for spike detection')
parser.add_argument('-m', '--max_size', type=float, default=0.0035, help='Maximum size for a single spike')
parser.add_argument('-n', '--numtaps', type=int, default=10001, help='Number of taps for high pass filter on Hilbert Transform')
parser.add_argument('-z', '--saturation', type=str, help='low,high saturation level to filter out')
parser.add_argument('-c', '--cutoff', type=float, default=1., help='Cutoff frequency of low pass filter')
parser.add_argument('-o', '--onlyabove', type=float, default=0.005, help='Only output spikes above this value')
parser.add_argument('-f', '--fixedwin', help='Fixed window(use for single-fish data files)', action='store_true')
parser.add_argument('-u', '--useHilbert', help='use already generated Hilbert file', action='store_true')


args = parser.parse_args()

threshold = args.detection
cutoff = args.cutoff
onlyAbove = args.onlyabove
refrac = int(args.refractory * freq)
maxSize = int(args.max_size * freq)
single = args.fixedwin
chirpGain = args.chirps_gain
outputFile = args.outfile

saturation = args.saturation
satL = -9.9 # TODO: pegar do .h
satH = 9.9
if saturation is not None:
    satL = float(saturation.split(',')[0].strip())
    satH = float(saturation.split(',')[1].strip())

debug = False

num = [-0.127838238013738, -0.122122430298337, -0.207240989159078, -0.741109041690890,  1.329553577868309]
den = [ 1.000000000000000, -0.445897866413142, -0.101209607292324, -0.047938888781208, -0.037189007185997]

def myabshilbert(x):
    return np.sqrt(scipy.signal.lfilter(num, den, x)[4:]**2 + x[:-4]**2)


inarr = np.memmap(args.timeseries_file, dtype=np.float32, mode='r')
sizein, = inarr.shape

if args.useHilbert == True:
    h = np.memmap(args.hilbert_file, np.float32, 'r')
else:
    sys.stdout.write('Generating new Hilbert file\n')
    sys.stdout.flush()
    h = np.memmap(args.hilbert_file, np.float32, 'w+', shape=(sizein//nchan - 4))
    for i in xrange(nchan):
        sys.stdout.write('\t%d\r'%i)
        sys.stdout.flush()
        h += myabshilbert(inarr[i::nchan])


    #kern_size = int(medfiltsize*freq)
    #if (kern_size % 2) == 0:
    #    kern_size += 1
    sys.stdout.write('gmean\n')
    sys.stdout.flush()
    #h[:] = scipy.signal.medfilt(h, kernel_size=kern_size) + 0.1*h
    h[:] = gmean(h, kernel_size=gmeansize)

    n = args.numtaps
    a = scipy.signal.firwin(n, [20, 1000], pass_zero=False, window='hanning', nyq=freq/2)

    sys.stdout.write('low pass\n')
    sys.stdout.flush()
    h[:] = np.convolve(h, a, mode='same')

del h
h = np.fromfile(args.hilbert_file, dtype=np.float32)
#h = h[50*50000:51*50000]

size10s = int(freq*2)
step = 3
hd = scipy.signal.decimate(h,step,zero_phase=True)
tam = hd.size
typMinSize = 12/step # Samples
typMaxSize = 120/step # Samples
typStep = 0.10
thLim = 0 # On the filtered hilber signal

NSteps = tam // size10s
if (tam % size10s) > 0:
    NSteps += 1

import pymp
locsp = pymp.shared.list()
with pymp.Parallel(8) as p:
    for i in p.range(0,NSteps):
        beg = size10s * i
        end = min( size10s*(i+1), tam )
        sig = hd[beg:end]
        sys.stdout.write('%d\t\t%d\n'%(i,NSteps))
        sys.stdout.flush()

        widths=np.arange(typMinSize, typMaxSize, typStep)

        locs_now = step*beg + step*scipy.signal.find_peaks_cwt(sig, widths,noise_perc=10)
        #locs_now, = scipy.signal.argrelmax(sig, order=40)
        #locs_now = step*beg + step*locs_now
        locsp.append(locs_now)
locs = np.array([],dtype=np.int64)
sys.stdout.write('concatenate\n')
sys.stdout.flush()
for i in range(NSteps):
    sys.stdout.write('%d\r'%i)
    sys.stdout.flush()
    locs = np.concatenate( (locs, np.array(locsp[i]))  )
sys.stdout.write('sorting - %d\n'%(locs.size))
sys.stdout.flush()
locs.sort()
del locsp

locs = locs[ np.where( h[locs] > hmin ) ]
ilocs, = np.where(np.diff(locs) > int(0.001*freq))
locs = locs[ilocs+1]
locs = np.unique(locs)

np.save('locs_'+args.hilbert_file.split('/')[-1].split('.')[0]+'.npy',locs)
#locs = np.load('locs_'+args.hilbert_file.split('/')[-1].split('.')[0]+'.npy')


'''import matplotlib.pyplot as plt
plt.figure(1)
plt.plot(locs[1:], np.diff(locs))
plt.figure(2)
plt.plot(h)
for i in locs:
    plt.plot( (i, i), (-0.2,1.2), 'k-', alpha=0.3)
plt.show()'''

argrelmaxorder=15
from scipy.signal import argrelmax
lastlen = 0
num=0
while num < (locs.size-1):
    if num >= (locs.size-1):
        sys.stdout.write('\n\nSTRANGE!!\n')
        sys.stdout.flush()

    concat = False

    loc = locs[num]

    try:
        l = (loc-step) + np.argmax(h[loc-step:loc+step])
    except ValueError:
        l = loc


    #if (num) % 100 == 0:
    sys.stdout.write('%.02f%%\t%d\t%d\r'%((100.*num/locs.size),loc,locs.size-1))
    sys.stdout.flush()

    if single==False:
        if locs[num+1] - l < winSize//2:
            concat = True


    # Verify if there is an undetected neighbour
    doubDetected = False
    if concat == False and single == False:
        sig = h[l-winSize//2:l+winSize//2]
        indexes, = argrelmax(sig, order=argrelmaxorder)
        bigs, = np.where(sig[indexes] > hmin)
        bigs = indexes[bigs]
        if len(bigs) == 2:
            l1p = l-winSize//2 + bigs[0]
            l2p = l-winSize//2 + bigs[1]
            l1 = min(l1p,l2p)
            l2 = max(l1p,l2p)
            doubDetected = True
        elif len(bigs) > 2:
            temp = sig[bigs]
            i1 = temp.argmax()
            l2p = l-winSize//2 + bigs[i1]
            temp[ i1 ] = 0
            i2 = temp.argmax()
            l1p = l-winSize//2 + bigs[i2]

            l1 = min(l1p,l2p)
            l2 = max(l1p,l2p)

            doubDetected = True

    #if loc == 2345598:
    #    print('\n\n')
    #    plt.plot(np.arange(l-winSize//2,l+winSize//2), sig)
    #    plt.title(loc)
    #    plt.show()


    if doubDetected == True:
        if abs(l2 - locs[num+1]) < tol:
            concat = True
        if num > 0:
            if abs(l1 - locs[num-1]) < (winSize//2):
                doubDetected = False
                l = l2

    if loc > 26932059 and False:
        print('\n\n')
        print(loc)
        print(repr(concat))
        print(repr(doubDetected))
        print(repr(bigs))
        import matplotlib.pyplot as plt
        plt.plot(h[l-winSize//2:l+winSize//2],'g-')
        for b in bigs:
            plt.plot( (b,b), (0,10), 'k-')
        plt.show()
        #sys.exit(-1)
                
    # Single EOD
    if (concat == False and doubDetected == False) or single == True: 
        size = winSize        

        if l-winSize//2 < 0 or l+winSize//2 > h.size:
            continue

        possiveisSpikesSig = [ np.array(inarr[c+nchan*(l-winSize//2): c + nchan*(l+winSize//2): nchan]) for c in range(nchan) ]
        tam = possiveisSpikesSig[0].size

        ### Fill with zeros
        try:
            beg = winSize//2 - next(n for n,val in enumerate(h[l-winSize//2:l][::-1]) if val < thLim)
        except StopIteration:
            beg = 0
        try:
            # TODO: passar pra tempo
            end = argrelmaxorder+tam - (winSize//2 - next(n for n,val in enumerate(h[l:l+winSize//2]) if val < thLim))
        except:
            end = tam
        end = min(tam, end)

        #import matplotlib.pyplot as plt
        #print('%d %d'%(beg, end))
        #plt.plot(h[l-winSize//2:l+winSize//2])
        for n in range(nchan):
            possiveisSpikesSig[n][:beg] = 0.
            possiveisSpikesSig[n][end:] = 0.
            #plt.plot(possiveisSpikesSig[n])
        #plt.show()

        ### Remove spikes with too low amplitude on training
        if single == True:
            listjanelas = []
            njanelas = 0
            for n,s in enumerate(possiveisSpikesSig):
                if np.abs(s).max() < onlyAbove:
                    continue
                else:
                    listjanelas.append( (n,s) )
                    njanelas += 1

            if njanelas == 0:
                num += 1
                continue
        else:
            njanelas = nchan
            listjanelas = [(n,s) for n,s in enumerate(possiveisSpikesSig)]

       
        off = max(0, l-winSize//2) 
        if l-winSize//2 > 26931932 and False:
            print('\n')
            print(beg)
            print(off)
            print(loc)
            import matplotlib.pyplot as plt
            plt.plot(np.arange(l-winSize//2, l+winSize//2), sig)
            plt.plot( (off, off), (0,2), 'k-')
            plt.plot( (off+winSize//2, off+winSize//2), (0,2), 'k-')
            plt.show()
            sys.exit(-1)
        writewin(outputFile, (lastlen, off, size, njanelas, winSize//2, listjanelas) )

    else:

        if doubDetected == False:
            loc1 = loc
            try:
                l1p = (loc1-step) + np.argmax(h[loc1-step:loc1+step])
            except ValueError:
                l1p = loc1
            loc2 = locs[num+1]
            try:
                l2p = (loc2-step) + np.argmax(h[loc2-step:loc2+step])
            except ValueError:
                l2p = loc2

            l1 = min(l1p, l2p)
            l2 = max(l1p, l2p)

        possiveisSpikesSig = [ np.array(inarr[c+nchan*(l1-winSize//2): c + nchan*(l2+winSize//2): nchan]) for c in range(nchan) ]
        tam = possiveisSpikesSig[0].size

        if loc > 103998 and False:
            print('%d %d %d'%(l1,l2,l2-l1))
            plt.plot(h[l1-winSize//2:l2+winSize//2],'g-')
            for Signal in possiveisSpikesSig:
                plt.plot(Signal,'b-')
            plt.show()

        ### Fill with zeros
        try:
            beg = winSize//2 - next(n for n,val in enumerate(h[l1-winSize//2:l1][::-1]) if val < thLim)
        except StopIteration:
            beg = 0
        try:
            end = (tam-winSize//2) + next(n for n,val in enumerate(h[l2:l2+winSize//2]) if val < thLim)
        except:
            end = tam
        end = min(tam, end)

        for n in range(nchan):
            possiveisSpikesSig[n][:beg] = 0.
            possiveisSpikesSig[n][end:] = 0.

        if loc > 103998 and False:
            print('%d %d %d %d'%(beg,end,tam,tam-winSize//2))
            plt.plot(h[l1-winSize//2:l2+winSize//2],'g-')
            for Signal in possiveisSpikesSig:
                plt.plot(Signal,'b-')
            plt.show()
        njanelas = nchan

        size = (l2+winSize//2)-(l1-winSize//2)
        listjanelas = [(n,s) for n,s in enumerate(possiveisSpikesSig)]

        off = max(0, l1-winSize//2)
        if off == 26931932 and False:
            print('\n\n')
            print(loc)
            sys.exit(-1)
        writewin(outputFile, (lastlen, off, size, njanelas, size//2, listjanelas) )

        if loc > 103998 and False:
            plt.plot(h[l1-winSize//2:l2+winSize//2],'g-')
            for n,Signal in listjanelas:
                plt.plot(Signal,'b-')
            plt.show()
    #if off == 114673:
    #    print('\n\n%d\t%d'%(off,loc))
    #    sys.exit(-1)
    lastlen = 6*4 + njanelas*4*(1+size)

    if concat == False:
        num += 1
    else:
        num += 2

    sys.stdout.write('\t\t\t\tE: %d\t%d\t%.02f%%\n'%(num, locs.size-1, 100.*num/locs.size))
    sys.stdout.flush()

    if num >= locs.size-1:
        sys.stdout.write('\n\nENDED\n')
        sys.stdout.flush()
